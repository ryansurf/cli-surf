{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cli-surf","text":"<p>cli-surf is a simple command line tool (with a frontend too!) that sends custom ocean/surf report data!</p> <p></p>"},{"location":"cheat_sheet/","title":"Cheat Sheet!","text":"<p>When developing, these commands may come in handy:</p>"},{"location":"cheat_sheet/#terminal-commands","title":"Terminal commands","text":"Argument Description <code>sudo ss -lptn 'sport = :&lt;port&gt;'</code> List the processes running on port <code>&lt;port&gt;</code>. <code>sudo kill -9 &lt;pid&gt;</code> Kill the process with with id <code>&lt;pid&gt;</code>"},{"location":"cheat_sheet/#poetry-commands","title":"Poetry Commands","text":"Argument Description <code>poetry install</code> Install project dependencies <code>poetry shell</code> Activate the virtual environment <code>poetry add &lt;package-name&gt;</code> Add a new dependency to Poetry <code>poetry add --group dev &lt;package-name&gt;</code> Add a new developer dependency to Poetry <code>poetry show</code> List all available dependencies with descriptions <code>pre-commit run --all-files</code> Run the Linter &amp; Formatter"},{"location":"cheat_sheet/#mkdocs-commands","title":"Mkdocs Commands","text":"Argument Description <code>mkdocs serve</code> Creates dev-server that lets your preview the docs as you change them."},{"location":"cheat_sheet/#make-commands","title":"Make Commands","text":"Argument Description <code>make install</code> Install dependencies and activates the virtual environment. <code>make run</code> Runs <code>server.py</code> <code>make run_docker</code> Runs <code>docker compose up -d</code> <code>make test</code> Runs pytest <code>make test_docker</code> Runs pytest on Docker <code>make output_coverage</code> Outputs the coverage of the tests <code>make send_email</code> Runs <code>send_email.py</code> <code>make lint</code> Runs the ruff linter <code>make format</code> Runs the ruff formatter <code>make clean</code> Cleans up files generated during testing (<code>.coverage</code>, <code>pytest_cache</code>, etc.)"},{"location":"cheat_sheet/#git","title":"Git","text":"Argument Description <code>git clone &lt;repo URL&gt;</code> Clones git repository to your local machine <code>git add &lt;file&gt;</code> Adds file to your next commit <code>git commit -m &lt;message&gt;</code> Commit your staged content (from <code>git add &lt;file&gt;</code>) <code>git push</code> Pushes local changes to remote repo branch <code>git status</code> Shows modified files <code>git branch</code> Shows the branches <code>git checkout -b &lt;branch&gt;</code> Creates a new branch, <code>branch</code>, and switches into it <code>git branch -d &lt;branch&gt;</code> Delete a local branch <code>git push -u origin &lt;branch-name&gt;</code> Pushes a local branch to the upstream remote repo <code>git log --branches --not --remotes</code> View commits that have not yet been pushed <code>git fetch origin pull/ID/head:BRANCH_NAME</code> Checking out a PR branch with <code>ID</code> and <code>BRANCH_NAME</code>"},{"location":"faq/","title":"FAQ","text":"What if I don't have <code>make</code> installed on my machine?  You can refer to the Makefile.  Instead of running a command like <code>make run</code>, you can run the command below it: <code>poetry run python src/server.py</code> What do I do if the linter fails?  If the linter fails, you can run <code>make format</code>, which may fix the issues for you! If not, it will tell you what needs to be fixed in the output.  What do I do if pytest fails?  If pytest fails, make sure you haven't broken anything unintentionally. Often, new changes in code will result in the unit tests breaking. Functions may now be returning different values/types which the tests do not expect. Please, try to debug any tests you may have broken!  The project doesn't work on my machine. What should I do?  cli-surf is a new project, and things break. If you come across any bugs, please submit an issue! What is the purpose of this project?  I had a small spare monitor that could only display a terminal screen, so I used it to display the weather via wttr.in. I like to surf, and figured it would be useful to display surf data along with the weather. That is where I got the idea for cli-surf!  I have a question about contributing.  Please refer to the contributing file, or ask a question on the Discord/Discussions page."},{"location":"install/","title":"Installation","text":""},{"location":"install/#fork-the-repository","title":"Fork the repository","text":"<ul> <li>Press Fork on the repository's page (or click here)</li> <li>Press Create fork</li> <li>On Github, navigate to your fork of the repository</li> <li>Click on &lt;&gt; Code</li> <li>Copy the URL for the repository</li> </ul>"},{"location":"install/#cloning-the-forked-repository","title":"Cloning the forked repository","text":"<p>Open your terminal and naviagate to the directory you want the fork to be in</p> <pre><code>git clone &lt;fork URL&gt;\n\nExample: git clone https://github.com/ryansurf/cli-surf.git\n</code></pre>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#environment-variables","title":"Environment Variables","text":"<ul> <li>Copy the variables from <code>.env.example</code> to <code>.env</code></li> </ul> <pre><code>cp .env.example .env\n</code></pre> <ul> <li>Edit the environment variables if necessary (see settings)</li> </ul>"},{"location":"structure/","title":"Structure","text":"<p>The basic structure of the project is:</p> <pre><code>\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 images\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 __pycache__\n\u2502   \u251c\u2500\u2500 static\n\u2502   \u2514\u2500\u2500 templates\n\u251c\u2500\u2500 tests\n</code></pre> <ul> <li><code>docs</code>: Contains markdown for the documentation (this website!)</li> <li><code>images</code>: Images/GIFs/Media</li> <li><code>src</code>: Source code!<ul> <li><code>src/static</code>: JavaScript</li> <li><code>src/templates</code>: HTML</li> </ul> </li> <li><code>tests</code>: Testing files</li> </ul> <p>More in-depth structure:</p> <pre><code>.\n\u251c\u2500\u2500 compose.yaml\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 dist\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cli_surf-0.1.0-py3-none-any.whl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 cli_surf-0.1.0.tar.gz\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cheat_sheet.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 faq.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 install.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 setup.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 structure.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styling.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests.md\n\u251c\u2500\u2500 help.txt\n\u251c\u2500\u2500 images\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cli.gif\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 coverage_report.PNG\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ocean.gif\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 old_cli.gif\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 wave.png\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 website.gif\n\u251c\u2500\u2500 makefile\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 art.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cli.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev_streamlit.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gpt.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 helper.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 send_email.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 server.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 streamlit_helper.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 templates\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __pycache__\n    \u251c\u2500\u2500 test_api.py\n    \u251c\u2500\u2500 test_cli.py\n    \u251c\u2500\u2500 test_gpt.py\n    \u251c\u2500\u2500 test_helper.py\n    \u2514\u2500\u2500 test_server.py\n\n10 directories, 42 files\n</code></pre>"},{"location":"styling/","title":"Styling","text":""},{"location":"styling/#code-style-and-quality","title":"Code Style and Quality","text":"<p>The PEP 8 styling convention is used.</p> <p>This is achieved using the ruff Linter and Formatter.</p> <p>The Linter and Formatter are automatically executed before committing via pre-commit.</p> <p>If you want to run the Linter and Formatter at any time, execute <code>pre-commit run --all-files</code>.</p> <p>You may also run <code>make lint</code> or <code>make format</code> to run the linter/formatter on its own.</p>"},{"location":"tests/","title":"Tests","text":"<p>Tests can be run using the <code>Makefile</code> in the root of the project</p> <p><code>make test</code></p> <p>Alternatively, navigate to <code>/test</code> and run:</p> <p><code>pytest</code></p> <p>On a push/pull request, git will run <code>pytest</code> for you to catch any errors.</p>"},{"location":"tests/#writing-tests","title":"Writing Tests","text":"<p>In <code>/tests</code>, there are multiple files for different types of test cases.</p> <ul> <li><code>test_helper.py</code>: Tests functions in <code>src/helper.py</code> (functions like rounding decimals, etc.)</li> <li><code>test_api.py</code>: Tests functions in <code>src/api.py</code>.</li> <li><code>test_server.py</code>: Tests the Flask server in <code>src/server.py</code></li> <li><code>test_gpt.py</code>: Tests functions server in <code>src/gpt.py</code></li> <li><code>test_cli.py</code>: Tests the function server in <code>src/cli.py</code></li> </ul> <p>Writing tests is encouraged, especially if you introduce a new function/feature!</p>"},{"location":"tests/#coverage-report","title":"Coverage Report","text":"<p>On each commit/Pull Request a coverage report should be automatically generated and posted in the commit's comments. It is helpful to get an idea of where tests are lacking.</p> <p> </p>"}]}