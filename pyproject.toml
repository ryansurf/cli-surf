[tool.poetry]
name = "cli-surf"
version = "0.1.0"
description = ""
authors = ["tadi <tadiguks@gmail.com>"] # TODO: email
readme = "README.md"
packages = [{ include = "src" }]

[tool.poetry.dependencies]
# command: `poetry add <package-name>`
python = "^3.9"
flask = "3.0.3"
flask-cors = "4.0.1"
g4f = "0.3.1.9"
geopy = "2.4.1"
openmeteo-requests = "1.2.0"
pandas = "2.2.2"
pydantic = {extras = ["email"], version = "^2.8.2"}
pydantic-settings = "2.2.1"
python-dotenv = "1.0.1"
requests = "2.32.3"
requests-cache = "1.2.0"
retry-requests = "2.0.0"
email-validator = "2.1.1"
openai = "^1.30.5"

[tool.poetry.group.dev.dependencies]
# command: `poetry add --group dev <package-name>`
ruff = "0.4.6"
pytest = "8.2.1"
pytest-cov = "5.0.0"
pre-commit = "3.7.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# pytest settings
[tool.pytest.ini_options]
testpaths = 'tests'
pythonpath = "."
addopts = '-p no:warnings'  # disable pytest warnings
log_format = '%(name)s %(levelname)s: %(message)s'

# ruff global settings
[tool.ruff]
line-length = 79

# linter
[tool.ruff.lint]
# I: isort
# F: Pyflakes
# E: Pycodestyle Error
# W: Pycodestyle Warning
# P: Pylint
# PT: flake8-pytest-style
preview = true
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

# formatter
[tool.ruff.format]
preview = true
quote-style = 'double'
